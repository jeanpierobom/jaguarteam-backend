# NOTE: update this with your service name
service: outcom-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-east-1
  # vpc:
  #   securityGroupIds:
  #     - sg-0c5fad3fa58d44208
  #   subnetIds:
  #     - subnet-9bba64b7
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - "ec2:CreateNetworkInterface"
  #     Resource: "*"
  timeout: 6
  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:DescribeTable
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:

  customAuthorizer:
    handler: customAuthorizer.handler

  customAuthorizer2:
    handler: customAuthorizer2.handler

  # Tag: Auth
  login:
    handler: login.main
    events:
      - http:
          path: login
          method: post
          cors: true
          # authorizer: aws_iam

  # Tag: City
  listCity:
    handler: listCity.main
    events:
      - http:
          path: city
          method: get
          cors: true
          #authorizer: aws_iam

  # Tag: Class Type
  listClassType:
    handler: listClassType.main
    events:
      - http:
          path: classType
          method: get
          cors: true
          #authorizer: aws_iam

  # Tag: Country
  listCountry:
    handler: listCountry.main
    events:
      - http:
          path: country
          method: get
          cors: true
          #authorizer: aws_iam

  # Tag: Language
  listLanguage:
    handler: listLanguage.main
    events:
      - http:
          path: language
          method: get
          cors: true
          #authorizer: aws_iam
  listLanguageProtected:
    handler: listLanguageProtected.main
    events:
      - http:
          path: language_protected
          method: get
          cors: true
          authorizer: customAuthorizer

  # Tag: Student
  studentUploadImage:
    handler: studentUploadImage.main
    events:
      - http:
          path: student/{id}/uploadImage
          method: post
          cors: true
          # authorizer: aws_iam
  createStudent:
    handler: createStudent.main
    events:
      - http:
          path: student
          method: post
          cors: true
          # authorizer: aws_iam
  getStudentById:
    handler: getStudentById.main
    events:
      - http:
          path: student/{id}
          method: get
          cors: true
          #authorizer: aws_iam
  listStudent:
    handler: listStudent.main
    events:
      - http:
          path: student
          method: get
          cors: true
          #authorizer: aws_iam
          request:
            parameters:
              querystrings:
                url: true
  updateStudent:
    handler: updateStudent.main
    events:
      - http:
          path: student
          method: put
          cors: true
          # authorizer: aws_iam

  # Tag: Teacher
  createTeacher:
    handler: createTeacher.main
    events:
      - http:
          path: teacher
          method: post
          cors: true
          # authorizer: aws_iam
  getTeacherById:
    handler: getTeacherById.main
    events:
      - http:
          path: teacher/{id}
          method: get
          cors: true
          #authorizer: aws_iam  
  updateTeacher:
    handler: updateTeacher.main
    events:
      - http:
          path: teacher
          method: put
          cors: true
          # authorizer: aws_iam
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /class
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  listTeacher:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /teacher
    # - method: GET request
    handler: listTeacher.main
    events:
      - http:
          path: teacher
          method: get
          cors: true
          #authorizer: aws_iam
          request:
            parameters:
              querystrings:
                url: true

  # Tag: Class
  createClass:
    handler: createClass.main
    events:
      - http:
          path: class
          method: post
          cors: true
          # authorizer: aws_iam
  getClassById:
    handler: getClassById.main
    events:
      - http:
          path: class/{id}
          method: get
          cors: true
          #authorizer: aws_iam
  listClass:
    handler: listClass.main
    events:
      - http:
          path: class
          method: get
          cors: true
          #authorizer: aws_iam
  updateClass:
    handler: updateClass.main
    events:
      - http:
          path: class
          method: put
          cors: true
          # authorizer: aws_iam

  # Tag: User
  createUser:
    handler: createUser.main
    events:
      - http:
          path: user
          method: post
          cors: true
          # authorizer: aws_iam
  getUserById:
    handler: getUserById.main
    events:
      - http:
          path: user/{id}
          method: get
          cors: true
          #authorizer: aws_iam 
  updateUser:
    handler: updateUser.main
    events:
      - http:
          path: user
          method: put
          cors: true
          # authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}